class Solution {
    func productExceptSelf(_ nums: [Int]) -> [Int] {
//         var resArray=[Int]()
//         for i in 0..<nums.count{
//             var temp=1
//             for j in 0..<nums.count{
//                 if i != j {
//                     temp *= nums[j]
//                 }
//             }
            
//             resArray.append(temp)
//         }
        
        
//         return resArray
        
        // first solution
//           var zcount = 0
        
//         let total = nums.reduce(1) {
//             let null = ($1 == 0)
//             if null { zcount += 1 }
//             return $0 * (null ? 1 : $1)
//         }
        
//         if zcount > 1 { return [Int](repeating: 0, count: nums.count) }
        
//         return nums.map { ($0 == 0 ? total : zcount == 1 ? 0 : total / $0) }
        
        
        //2. 2nd version is prefix and postfix method
        var answer=[Int]()
        
        //calculating prefix
        var prefix=1
        for i in 0..<nums.count{
            answer.append(prefix)
            prefix*=nums[i]
        }
        
        //calculating postfix
        var postfix=1
        for i in stride(from:nums.count-1, to:-1, by: -1){
            answer[i]*=postfix
            postfix*=nums[i]
        }
        
        return answer
    }
}
