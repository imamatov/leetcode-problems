/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init() { self.val = 0; self.next = nil; }
 *     public init(_ val: Int) { self.val = val; self.next = nil; }
 *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }
 * }
 */
class Solution {
    func reverseList(_ head: ListNode?) -> ListNode? {
        
        //1. Using Two Pointers O(n) and O(1)
        // var prev:ListNode?=nil
        // var cur=head
        // while cur != nil{
        //     var next=cur?.next
        //     cur?.next=prev
        //     prev=cur
        //     cur=next
        // }
        // return prev
        
        //2.Recursive  solution O(n) and O(n)
        
        if head == nil{
            return nil
        }
        
        var newHead=head
        if head?.next != nil{
            newHead=reverseList(head?.next)
            head?.next?.next=head
            head?.next=nil
        }
        
        return newHead
    }
}
