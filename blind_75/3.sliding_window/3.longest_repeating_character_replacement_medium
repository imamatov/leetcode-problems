class Solution {
    func characterReplacement(_ s: String, _ k: Int) -> Int {
        
        //1. Using Sliding window with hash map
//         var count=[Character:Int]()
//         var res=0
//         var l=0
//         var s=Array(s)
//         for r in 0..<s.count{
            
//             count[s[r],default:0]+=1
            
//             var maxim=count.values.max() ?? 0
            
//             while (r-l+1) - maxim > k{
//                 count[s[l],default:0]-=1
//                 l+=1
//             }
            
//             res=max(res,r-l+1)
//         }
        
//         return res
        
        
        //1. A bit optimized by MaxFrequency character 
        // Using Sliding window with hash map
        var count=[Character:Int]()
        var res=0
        var l=0
        var s=Array(s)
        var maxF=0
        for r in 0..<s.count{
            
            count[s[r],default:0]+=1
            maxF=max(maxF,count[s[r],default:0])
            
            // var maxim=count.values.max() ?? 0
            
            while (r-l+1) - maxF > k{
                count[s[l],default:0]-=1
                l+=1
            }
            
            res=max(res,r-l+1)
        }
        
        return res
    }
}
