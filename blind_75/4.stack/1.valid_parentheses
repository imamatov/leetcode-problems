class Solution {
    func isValid(_ s: String) -> Bool {
        //1.Using helper functions
        // if s.count<=1{
        //     return false
        // }
        // var stack:[Character]=[]
        // for c in s{
        //     if(helper(c)){
        //         if stack.last != reverse(c){
        //             return false
        //         }else{
        //             stack.removeLast()
        //         }
        //     }else{
        //         stack.append(c)
        //     }
        // }
        // return stack.isEmpty
        
        //2. Using HashMap and Stack
        var hashMap:[Character:Character]=[")":"(", "]":"[", "}":"{"]
        var stack=[Character]()
        for c in s{
            if let val = hashMap[c]{
                if !stack.isEmpty && stack.last==val{
                    stack.removeLast()
                }else{
                    return false
                }
            }else{
                stack.append(c)
            }
        }
        
        return  stack.isEmpty
    }
    
    func helper(_ c:Character)->Bool{
        if c == "(" || c == "{" || c == "[" {
            return false
        }
        return true
    }
    
    
    func reverse(_ c:Character)->Character{
       switch c {
           case ")":
           return "("
           
           case "]":
           return "["
           
           case "}":
           return "{"
           default:
           return "."
       }
    }
}
