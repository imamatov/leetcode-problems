class Solution {
    func threeSum(_ nums: [Int]) -> [[Int]] {
        
        //1. accepted solution
//         var nums=nums.sorted()
//         var n=nums.count-1
//         var res=[[Int]]()
        
//         for i in 0...n{
//             if i>0 && nums[i] == nums[i-1]{
//                 continue
//             }
            
            
//             var sum = -nums[i]
            
//             var l=i+1
//             var r=n
            
            
//             while l < r {
//                 var temp_sum=nums[l]+nums[r]
                
//                 if temp_sum == sum{
//                     res.append([nums[i],nums[l], nums[r]])
                    
//                     while l < r && nums[l] == nums[l+1]{
//                         l+=1
//                     }
                    
//                     while  l < r && nums[r]==nums[r-1]{
//                         r-=1
//                     }
                    
//                 }
                
                
//                 if temp_sum > sum{
                    
//                     r-=1
                    
//                 }else{
                    
//                     l+=1
                    
//                 }
//             }
            
//         }
        
//         return res
        
        
        
        
        
        // var res=[[Int]]()
        // var nums=nums.sorted()
        // for i in 0..<nums.count-2{
        //     for j in i+1..<nums.count-1{
        //         for k in j+1..<nums.count{
        //             if nums[i]+nums[j]+nums[k]==0{
        //                 var sum=[nums[i],nums[j],nums[k]]
        //                 sum=sum.sorted()
        //                 if !res.contains(sum){
        //                     res.append(sum)
        //                 }
        //             }
        //         }
        //     }
        // }
        
        
        
        //2. using two pointers approach
        var res=[[Int]]()
        var nums=nums.sorted()
        for (i,a) in nums.enumerated(){
            if i>0 && a==nums[i-1]{
                continue
            }
            
            var start=i+1
            var end = nums.count-1
            
            while start < end {
                var sum=a + nums[start] + nums[end]
                
                if sum > 0{
                    end-=1
                }else if sum < 0 {
                    start+=1
                } else {
                    res.append([a,nums[start],nums[end]])
                    start+=1
                    while nums[start] == nums[start-1] && start<end{
                        start+=1
                    }
                }
            } 
        }
        
        return res
    }
}
